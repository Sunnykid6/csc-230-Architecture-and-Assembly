
A4v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800200  00000488  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800244  00800244  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001643  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dae  00000000  00000000  00001c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000755  00000000  00000000  00002a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00003190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000672  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000751  00000000  00000000  0000390a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000405b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e8       	ldi	r30, 0x88	; 136
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 34       	cpi	r26, 0x44	; 68
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e4       	ldi	r26, 0x44	; 68
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 34       	cpi	r26, 0x4A	; 74
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	54 d1       	rcall	.+680    	; 0x3c8 <main>
 120:	b1 c1       	rjmp	.+866    	; 0x484 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_nibble>:
uint8_t lcd_pos = LCD_LINE1;


static void lcd_nibble( uint8_t d )
{
  LCD_D7 = 0; if( d & 1<<7 ) LCD_D7 = 1;
 124:	e2 e0       	ldi	r30, 0x02	; 2
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	90 81       	ld	r25, Z
 12a:	9f 7e       	andi	r25, 0xEF	; 239
 12c:	90 83       	st	Z, r25
 12e:	88 23       	and	r24, r24
 130:	1c f4       	brge	.+6      	; 0x138 <lcd_nibble+0x14>
 132:	90 81       	ld	r25, Z
 134:	90 61       	ori	r25, 0x10	; 16
 136:	90 83       	st	Z, r25
  LCD_D6 = 0; if( d & 1<<6 ) LCD_D6 = 1;
 138:	e2 e0       	ldi	r30, 0x02	; 2
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	90 81       	ld	r25, Z
 13e:	97 7f       	andi	r25, 0xF7	; 247
 140:	90 83       	st	Z, r25
 142:	86 ff       	sbrs	r24, 6
 144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_nibble+0x28>
 146:	90 81       	ld	r25, Z
 148:	98 60       	ori	r25, 0x08	; 8
 14a:	90 83       	st	Z, r25
  LCD_D5 = 0; if( d & 1<<5 ) LCD_D5 = 1;
 14c:	73 98       	cbi	0x0e, 3	; 14
 14e:	85 fd       	sbrc	r24, 5
 150:	73 9a       	sbi	0x0e, 3	; 14
  LCD_D4 = 0; if( d & 1<<4 ) LCD_D4 = 1;
 152:	a5 98       	cbi	0x14, 5	; 20
 154:	84 fd       	sbrc	r24, 4
 156:	a5 9a       	sbi	0x14, 5	; 20
  LCD_E0 = 1;
 158:	e2 e0       	ldi	r30, 0x02	; 2
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_nibble+0x40>
 168:	00 00       	nop
  _delay_us( LCD_TIME_ENA );
  LCD_E0 = 0;
 16a:	80 81       	ld	r24, Z
 16c:	8f 7b       	andi	r24, 0xBF	; 191
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <lcd_command>:
  _delay_us( LCD_TIME_DAT );
}


void lcd_command( uint8_t d )
{
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
  LCD_RS = 0;
 176:	e2 e0       	ldi	r30, 0x02	; 2
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	80 81       	ld	r24, Z
 17c:	8f 7d       	andi	r24, 0xDF	; 223
 17e:	80 83       	st	Z, r24
}


static void lcd_byte( uint8_t d )
{
  lcd_nibble( d );
 180:	8c 2f       	mov	r24, r28
 182:	d0 df       	rcall	.-96     	; 0x124 <lcd_nibble>
  lcd_nibble( d<<4 );
 184:	8c 2f       	mov	r24, r28
 186:	82 95       	swap	r24
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	cc df       	rcall	.-104    	; 0x124 <lcd_nibble>
 18c:	87 ec       	ldi	r24, 0xC7	; 199
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_command+0x1e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_command+0x24>
 196:	00 00       	nop

void lcd_command( uint8_t d )
{
  LCD_RS = 0;
  lcd_byte( d );
  switch( d ){
 198:	c4 30       	cpi	r28, 0x04	; 4
 19a:	18 f0       	brcs	.+6      	; 0x1a2 <lcd_command+0x30>
 19c:	c0 38       	cpi	r28, 0x80	; 128
 19e:	50 f0       	brcs	.+20     	; 0x1b4 <lcd_command+0x42>
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <lcd_command+0x3e>
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_command+0x34>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_command+0x3a>
 1ac:	00 00       	nop
    case 0 ... 3:                       // on longer commands
      _delay_us( LCD_TIME_CLR );
      d = LCD_LINE1;
 1ae:	c0 e8       	ldi	r28, 0x80	; 128
    case 0x80 ... 0xFF:                 // set position
      lcd_pos = d;
 1b0:	c0 93 04 02 	sts	0x0204, r28	; 0x800204 <lcd_pos>
  }
}
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_putchar>:


void lcd_putchar( uint8_t d )
{
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
  LCD_RS = 1;
 1bc:	e2 e0       	ldi	r30, 0x02	; 2
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	80 81       	ld	r24, Z
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	80 83       	st	Z, r24
}


static void lcd_byte( uint8_t d )
{
  lcd_nibble( d );
 1c6:	8c 2f       	mov	r24, r28
 1c8:	ad df       	rcall	.-166    	; 0x124 <lcd_nibble>
  lcd_nibble( d<<4 );
 1ca:	8c 2f       	mov	r24, r28
 1cc:	82 95       	swap	r24
 1ce:	80 7f       	andi	r24, 0xF0	; 240
 1d0:	a9 df       	rcall	.-174    	; 0x124 <lcd_nibble>
 1d2:	87 ec       	ldi	r24, 0xC7	; 199
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_putchar+0x1e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_putchar+0x24>
 1dc:	00 00       	nop

void lcd_putchar( uint8_t d )
{
  LCD_RS = 1;
  lcd_byte( d );
  switch( ++lcd_pos ){
 1de:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <lcd_pos>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <lcd_pos>
 1e8:	80 39       	cpi	r24, 0x90	; 144
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <lcd_putchar+0x3c>
 1ec:	80 3d       	cpi	r24, 0xD0	; 208
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <lcd_putchar+0x40>
      break;
    case LCD_LINE4 + LCD_COLUMN:
#endif
#endif
#endif
      d = LCD_LINE1;
 1f0:	80 e8       	ldi	r24, 0x80	; 128
  LCD_RS = 1;
  lcd_byte( d );
  switch( ++lcd_pos ){
    case LCD_LINE1 + LCD_COLUMN:
#ifdef LCD_LINE2
      d = LCD_LINE2;
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <lcd_putchar+0x3e>
      d = LCD_LINE1;
      break;
    default: 
      return;
  }
  lcd_command( d );
 1f4:	80 ec       	ldi	r24, 0xC0	; 192
 1f6:	bd df       	rcall	.-134    	; 0x172 <lcd_command>
}
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_puts>:


void lcd_puts( void *s )                        // display string from SRAM
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	29 f0       	breq	.+10     	; 0x212 <lcd_puts+0x16>
 208:	21 96       	adiw	r28, 0x01	; 1
    lcd_putchar( *s1 );
 20a:	d6 df       	rcall	.-84     	; 0x1b8 <lcd_putchar>
}


void lcd_puts( void *s )                        // display string from SRAM
{
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fc cf       	rjmp	.-8      	; 0x20a <lcd_puts+0xe>
    lcd_putchar( *s1 );
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <lcd_blank>:


void lcd_blank( uint8_t len )                   // blank n digits
{
 218:	cf 93       	push	r28
  while( len-- )
 21a:	88 23       	and	r24, r24
 21c:	29 f0       	breq	.+10     	; 0x228 <lcd_blank+0x10>
 21e:	c8 2f       	mov	r28, r24
    lcd_putchar( ' ' );
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	ca df       	rcall	.-108    	; 0x1b8 <lcd_putchar>
 224:	c1 50       	subi	r28, 0x01	; 1
}


void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
 226:	e1 f7       	brne	.-8      	; 0x220 <lcd_blank+0x8>
    lcd_putchar( ' ' );
}
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
 22c:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
 22e:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
 230:	e1 e0       	ldi	r30, 0x01	; 1
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	80 81       	ld	r24, Z
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
 23a:	80 81       	ld	r24, Z
 23c:	80 61       	ori	r24, 0x10	; 16
 23e:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
 240:	80 81       	ld	r24, Z
 242:	80 62       	ori	r24, 0x20	; 32
 244:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
  LCD_E0 = 0;
 24c:	e2 e0       	ldi	r30, 0x02	; 2
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	80 81       	ld	r24, Z
 252:	8f 7b       	andi	r24, 0xBF	; 191
 254:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
 256:	80 81       	ld	r24, Z
 258:	8f 7d       	andi	r24, 0xDF	; 223
 25a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	8f e5       	ldi	r24, 0x5F	; 95
 25e:	9a ee       	ldi	r25, 0xEA	; 234
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x34>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x3a>
 266:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
 268:	80 e3       	ldi	r24, 0x30	; 48
 26a:	5c df       	rcall	.-328    	; 0x124 <lcd_nibble>
 26c:	8f e0       	ldi	r24, 0x0F	; 15
 26e:	90 e4       	ldi	r25, 0x40	; 64
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x44>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init+0x4a>
 276:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
 278:	80 e3       	ldi	r24, 0x30	; 48
 27a:	54 df       	rcall	.-344    	; 0x124 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	8f e8       	ldi	r24, 0x8F	; 143
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x54>
 284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_init+0x5a>
  _delay_us( 100 );
  lcd_nibble( 0x30 );
 286:	00 00       	nop
 288:	80 e3       	ldi	r24, 0x30	; 48
 28a:	4c df       	rcall	.-360    	; 0x124 <lcd_nibble>
 28c:	87 ec       	ldi	r24, 0xC7	; 199
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_init+0x64>
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_init+0x6a>
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
 296:	00 00       	nop
 298:	80 e2       	ldi	r24, 0x20	; 32
 29a:	44 df       	rcall	.-376    	; 0x124 <lcd_nibble>
 29c:	87 ec       	ldi	r24, 0xC7	; 199
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init+0x74>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_init+0x7a>
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
 2a6:	00 00       	nop
 2a8:	88 e2       	ldi	r24, 0x28	; 40
#endif
  lcd_command( 0x08 );                          // display off
 2aa:	63 df       	rcall	.-314    	; 0x172 <lcd_command>
 2ac:	88 e0       	ldi	r24, 0x08	; 8
  lcd_command( 0x01 );                          // display clear
 2ae:	61 df       	rcall	.-318    	; 0x172 <lcd_command>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	5f df       	rcall	.-322    	; 0x172 <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	5d df       	rcall	.-326    	; 0x172 <lcd_command>
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
  lcd_command( 0x0C );                          // on, no cursor, no blink
 2ba:	5b cf       	rjmp	.-330    	; 0x172 <lcd_command>
 2bc:	08 95       	ret

000002be <copyMessage1>:
 2be:	fc 01       	movw	r30, r24
 2c0:	db 01       	movw	r26, r22

		
		
}

void copyMessage1(char* ptr, char* copiedMsg, char *msg){
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	90 e0       	ldi	r25, 0x00	; 0
	
	int i = 0;
	for(i = 0; i < MAX_STRING_LEN - 1; i++){
		if(*ptr == '\0'){
 2c6:	20 81       	ld	r18, Z
 2c8:	22 23       	and	r18, r18
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <copyMessage1+0x14>
			ptr = msg;
		}
		else{
			*copiedMsg = *ptr;
 2cc:	2d 93       	st	X+, r18
			copiedMsg++;
			ptr++;
 2ce:	31 96       	adiw	r30, 0x01	; 1
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <copyMessage1+0x18>
void copyMessage1(char* ptr, char* copiedMsg, char *msg){
	
	int i = 0;
	for(i = 0; i < MAX_STRING_LEN - 1; i++){
		if(*ptr == '\0'){
			ptr = msg;
 2d2:	e4 2f       	mov	r30, r20
 2d4:	f5 2f       	mov	r31, r21
 2d6:	01 97       	sbiw	r24, 0x01	; 1
}

void copyMessage1(char* ptr, char* copiedMsg, char *msg){
	
	int i = 0;
	for(i = 0; i < MAX_STRING_LEN - 1; i++){
 2d8:	b1 f7       	brne	.-20     	; 0x2c6 <copyMessage1+0x8>
			*copiedMsg = *ptr;
			copiedMsg++;
			ptr++;
		}
	}
}
 2da:	08 95       	ret

000002dc <copyMessage2>:

void copyMessage2(char* ptr, char* copiedMsg, char *msg){
 2dc:	fc 01       	movw	r30, r24
 2de:	db 01       	movw	r26, r22
 2e0:	80 e1       	ldi	r24, 0x10	; 16
 2e2:	90 e0       	ldi	r25, 0x00	; 0
	
	int i = 0;
	for(i = 0; i < MAX_STRING_LEN - 1; i++){
		if(*ptr == '\0'){
 2e4:	20 81       	ld	r18, Z
 2e6:	22 23       	and	r18, r18
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <copyMessage2+0x14>
			ptr = msg;
		}
		else{
			*copiedMsg = *ptr;
 2ea:	2d 93       	st	X+, r18
			copiedMsg++;
			ptr++;
 2ec:	31 96       	adiw	r30, 0x01	; 1
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <copyMessage2+0x18>
void copyMessage2(char* ptr, char* copiedMsg, char *msg){
	
	int i = 0;
	for(i = 0; i < MAX_STRING_LEN - 1; i++){
		if(*ptr == '\0'){
			ptr = msg;
 2f0:	e4 2f       	mov	r30, r20
 2f2:	f5 2f       	mov	r31, r21
 2f4:	01 97       	sbiw	r24, 0x01	; 1
}

void copyMessage2(char* ptr, char* copiedMsg, char *msg){
	
	int i = 0;
	for(i = 0; i < MAX_STRING_LEN - 1; i++){
 2f6:	b1 f7       	brne	.-20     	; 0x2e4 <copyMessage2+0x8>
			*copiedMsg = *ptr;
			copiedMsg++;
			ptr++;
		}
	}
}
 2f8:	08 95       	ret

000002fa <movPointer>:

void movPointer(){
	
	if(*l1ptr == '\0'){
 2fa:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <__data_end>
 2fe:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <__data_end+0x1>
 302:	80 81       	ld	r24, Z
 304:	81 11       	cpse	r24, r1
 306:	08 c0       	rjmp	.+16     	; 0x318 <movPointer+0x1e>
		l1ptr = msg1;
 308:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <msg1>
 30c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <msg1+0x1>
 310:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0x1>
 314:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end>
	}
	l1ptr++;
 318:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
 31c:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <__data_end+0x1>
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0x1>
 326:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end>
		
	if(*l2ptr == '\0'){
 32a:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <l2ptr>
 32e:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <l2ptr+0x1>
 332:	80 81       	ld	r24, Z
 334:	81 11       	cpse	r24, r1
 336:	08 c0       	rjmp	.+16     	; 0x348 <movPointer+0x4e>
		l2ptr = msg2;
 338:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 33c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 340:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <l2ptr+0x1>
 344:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <l2ptr>
	}
	l2ptr++;
 348:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <l2ptr>
 34c:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <l2ptr+0x1>
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <l2ptr+0x1>
 356:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <l2ptr>
 35a:	08 95       	ret

0000035c <checkButton>:
}

int checkButton(){
	
	int whichButton;
	ADCSRA |= 0x40;
 35c:	ea e7       	ldi	r30, 0x7A	; 122
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	80 64       	ori	r24, 0x40	; 64
 364:	80 83       	st	Z, r24
	
	while(ADCSRA & 0x40){
 366:	80 81       	ld	r24, Z
 368:	86 fd       	sbrc	r24, 6
 36a:	fd cf       	rjmp	.-6      	; 0x366 <checkButton+0xa>
		;
	}
	
	unsigned int lowVal = ADCL;
 36c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	unsigned int highVal = ADCH;
 370:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
	lowVal = lowVal + (highVal << 8);
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	98 2f       	mov	r25, r24
 378:	88 27       	eor	r24, r24
 37a:	82 0f       	add	r24, r18
 37c:	91 1d       	adc	r25, r1
	if(lowVal > 1000){
		whichButton = 0;
	}
	
	if(lowVal < 50){
 37e:	82 33       	cpi	r24, 0x32	; 50
 380:	91 05       	cpc	r25, r1
 382:	68 f0       	brcs	.+26     	; 0x39e <checkButton+0x42>
		whichButton =  1;
	}
	else if(lowVal < 195){
 384:	83 3c       	cpi	r24, 0xC3	; 195
 386:	91 05       	cpc	r25, r1
 388:	68 f0       	brcs	.+26     	; 0x3a4 <checkButton+0x48>
		whichButton = 2;
	}
	else if(lowVal < 380){
 38a:	8c 37       	cpi	r24, 0x7C	; 124
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	92 07       	cpc	r25, r18
 390:	60 f0       	brcs	.+24     	; 0x3aa <checkButton+0x4e>
		whichButton = 3;
	}
	else if(lowVal < 555){
 392:	8b 32       	cpi	r24, 0x2B	; 43
 394:	92 40       	sbci	r25, 0x02	; 2
 396:	60 f0       	brcs	.+24     	; 0x3b0 <checkButton+0x54>
		whichButton = 4;	
	}
	else{
		whichButton = 5;
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	08 95       	ret
	if(lowVal > 1000){
		whichButton = 0;
	}
	
	if(lowVal < 50){
		whichButton =  1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	08 95       	ret
	}
	else if(lowVal < 195){
		whichButton = 2;
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret
	}
	else if(lowVal < 380){
		whichButton = 3;
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	08 95       	ret
	}
	else if(lowVal < 555){
		whichButton = 4;	
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	90 e0       	ldi	r25, 0x00	; 0
		whichButton = 5;
	}
	
	return whichButton;
	
}
 3b4:	08 95       	ret

000003b6 <doButton>:

void doButton(int whichButton){
	
	int checkButton2;
	
	if(whichButton == 2){
 3b6:	02 97       	sbiw	r24, 0x02	; 2
 3b8:	31 f4       	brne	.+12     	; 0x3c6 <doButton+0x10>
		checkButton2 = checkButton();
 3ba:	d0 df       	rcall	.-96     	; 0x35c <checkButton>
		while(checkButton2 != 3){
 3bc:	03 97       	sbiw	r24, 0x03	; 3
			checkButton2 = checkButton();
 3be:	19 f0       	breq	.+6      	; 0x3c6 <doButton+0x10>
 3c0:	cd df       	rcall	.-102    	; 0x35c <checkButton>
	
	int checkButton2;
	
	if(whichButton == 2){
		checkButton2 = checkButton();
		while(checkButton2 != 3){
 3c2:	03 97       	sbiw	r24, 0x03	; 3
 3c4:	e9 f7       	brne	.-6      	; 0x3c0 <doButton+0xa>
 3c6:	08 95       	ret

000003c8 <main>:
char *msg1 = "Hopefully This scrolls ";
char *msg2 = "This just scrolls on the second line ";
int chkButton;
//int speed = 500;

int main(void){
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	a2 97       	sbiw	r28, 0x22	; 34
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
	char line1[MAX_STRING_LEN];
	line1[MAX_STRING_LEN - 1] = '\0';
 3dc:	19 8a       	std	Y+17, r1	; 0x11
	l1ptr = msg1;
 3de:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <msg1>
 3e2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <msg1+0x1>
 3e6:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0x1>
 3ea:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end>
	
	char line2[MAX_STRING_LEN];
	line2[MAX_STRING_LEN - 1] = '\0';
 3ee:	1a a2       	std	Y+34, r1	; 0x22
	l2ptr = msg2;
 3f0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 3f4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 3f8:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <l2ptr+0x1>
 3fc:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <l2ptr>
	
	lcd_init();
 400:	15 df       	rcall	.-470    	; 0x22c <lcd_init>
	ADCSRA = 0x87;
 402:	87 e8       	ldi	r24, 0x87	; 135
 404:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADMUX = 0x40;
 408:	80 e4       	ldi	r24, 0x40	; 64
 40a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
void lcd_command( uint8_t d );

// An inline function to set the x and y position
// in a 2-line LCD display
static inline void lcd_xy(uint8_t x, uint8_t y){
	lcd_command(x + ((y==1) ? LCD_LINE2 : LCD_LINE1 ));
 40e:	80 e8       	ldi	r24, 0x80	; 128
 410:	b0 de       	rcall	.-672    	; 0x172 <lcd_command>
	
	
	for(;;){
		lcd_xy(0, 0);
			
		lcd_blank(MAX_STRING_LEN);
 412:	81 e1       	ldi	r24, 0x11	; 17
 414:	01 df       	rcall	.-510    	; 0x218 <lcd_blank>
 416:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <msg1>
		copyMessage1(l1ptr, line1, msg1);
 41a:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <msg1+0x1>
 41e:	be 01       	movw	r22, r28
 420:	6f 5f       	subi	r22, 0xFF	; 255
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
 428:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <__data_end+0x1>
 42c:	48 df       	rcall	.-368    	; 0x2be <copyMessage1>
 42e:	80 e8       	ldi	r24, 0x80	; 128
 430:	a0 de       	rcall	.-704    	; 0x172 <lcd_command>
			
		lcd_xy(0, 0);
		lcd_puts(line1);	
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	e2 de       	rcall	.-572    	; 0x1fc <lcd_puts>
 438:	80 ec       	ldi	r24, 0xC0	; 192
 43a:	9b de       	rcall	.-714    	; 0x172 <lcd_command>
 43c:	81 e1       	ldi	r24, 0x11	; 17
		
		lcd_xy(0, 1);
		
		lcd_blank(MAX_STRING_LEN);
 43e:	ec de       	rcall	.-552    	; 0x218 <lcd_blank>
 440:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
		copyMessage2(l2ptr, line2, msg2);
 444:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
 448:	be 01       	movw	r22, r28
 44a:	6e 5e       	subi	r22, 0xEE	; 238
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <l2ptr>
 452:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <l2ptr+0x1>
 456:	42 df       	rcall	.-380    	; 0x2dc <copyMessage2>
 458:	80 ec       	ldi	r24, 0xC0	; 192
		
		lcd_xy(0, 1);
		lcd_puts(line2);
 45a:	8b de       	rcall	.-746    	; 0x172 <lcd_command>
 45c:	ce 01       	movw	r24, r28
 45e:	42 96       	adiw	r24, 0x12	; 18
 460:	cd de       	rcall	.-614    	; 0x1fc <lcd_puts>
		
		movPointer();
 462:	4b df       	rcall	.-362    	; 0x2fa <movPointer>
 464:	7b df       	rcall	.-266    	; 0x35c <checkButton>
		chkButton = checkButton();
 466:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <chkButton+0x1>
 46a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <chkButton>
 46e:	a3 df       	rcall	.-186    	; 0x3b6 <doButton>
 470:	2f ef       	ldi	r18, 0xFF	; 255
		doButton(chkButton);
 472:	8e e9       	ldi	r24, 0x9E	; 158
 474:	94 e2       	ldi	r25, 0x24	; 36
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 480:	00 00       	nop
 482:	c5 cf       	rjmp	.-118    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
